def analizar_conversaciones_sin_feedback(df):
    st.markdown("## 🔍 Análisis Completo de Conversaciones Sin Feedback")

    if "feedback" not in df.columns:
        st.info("ℹ️ No hay datos de feedback disponibles")
        return

    sin_feedback = df[df["feedback"].isna()].copy()
    if sin_feedback.empty:
        st.markdown('<div class="alerta-exito">✅ <strong>¡Excelente!</strong> Todas las conversaciones tienen feedback.</div>', unsafe_allow_html=True)
        return

    total_sin_feedback = len(sin_feedback)
    conversaciones_afectadas = sin_feedback["conversation_id"].nunique() if "conversation_id" in sin_feedback.columns else 0
    usuarios_afectados = sin_feedback["user_id"].nunique() if "user_id" in sin_feedback.columns else 0

    st.markdown(f'<div class="alerta-info">📋 <strong>{total_sin_feedback:,} mensajes sin feedback</strong> en <strong>{conversaciones_afectadas:,} conversaciones</strong> de <strong>{usuarios_afectados:,} usuarios</strong></div>', unsafe_allow_html=True)

    # Agrupar por conversación y mostrar desplegables estilo "Análisis por Feedback"
    grupos = sin_feedback.groupby("conversation_id")
    for conv_id, datos_conv in grupos:
        titulo = datos_conv["conversation_title"].iloc[0] or "Sin título"
        usuario = datos_conv["user_id"].iloc[0]
        fecha_inicio = datos_conv["createdAt"].min()
        fecha_fin = datos_conv["createdAt"].max()
        duracion = fecha_fin - fecha_inicio

        st.markdown(f"""
        <div class="contenedor-conversacion">
            <div class="encabezado-conversacion">
                <div class="info-conversacion">
                    <div class="titulo-conversacion">🗣️ Conversación {conv_id}</div>
                    <div class="meta-conversacion">📋 <strong>Título:</strong> {titulo}</div>
                    <div class="meta-conversacion">👤 <strong>Usuario:</strong> {usuario}</div>
                    <div class="meta-conversacion">📅 <strong>Duración:</strong> {duracion}</div>
                </div>
                <div class="etiqueta-conversacion">{len(datos_conv)} mensajes</div>
            </div>
        """, unsafe_allow_html=True)

        with st.expander(f"👁️ Ver conversación completa", expanded=False):
            for idx, (_, msg) in enumerate(datos_conv.iterrows(), 1):
                rol = msg.get("role", "N/A").lower()
                contenido = msg.get("content", "[Sin contenido]").strip()
                timestamp = pd.to_datetime(msg.get("createdAt", "")).strftime("%Y-%m-%d %H:%M:%S")
                feedback = msg.get("feedback", "Sin feedback")

                clase_css = {
                    "user": "mensaje-usuario",
                    "assistant": "mensaje-asistente"
                }.get(rol, "mensaje-sistema")

                icono = {"user": "👤", "assistant": "🤖"}.get(rol, "⚙️")

                st.markdown(f"""
                <div class="item-mensaje {clase_css}">
                    <div class="encabezado-mensaje">
                        <div class="rol-mensaje">
                            <span>{icono}</span>
                            <span><strong>Mensaje #{idx} - {rol.title()}</strong></span>
                            <span class="tiempo-mensaje">🕐 {timestamp} | 📝 Feedback: {feedback}</span>
                        </div>
                    </div>
                    <div class="contenido-mensaje">{contenido}</div>
                </div>
                """, unsafe_allow_html=True)

        st.markdown("</div>", unsafe_allow_html=True)
        st.markdown("---")
