# ==================== AN√ÅLISIS SIN FEEDBACK COMPLETO (CORREGIDO) ====================
def analizar_conversaciones_sin_feedback(df):
    st.markdown("## üîç An√°lisis Completo de Conversaciones Sin Feedback")

    if "feedback" not in df.columns:
        st.info("‚ÑπÔ∏è No hay datos de feedback disponibles")
        return

    # Asegurarnos de que tenemos las columnas necesarias
    columnas_necesarias = ["conversation_id", "user_id", "createdAt", "content", "role"]
    if not all(col in df.columns for col in columnas_necesarias):
        st.error("‚ùå Faltan columnas necesarias para el an√°lisis")
        return

    # Filtrar mensajes sin feedback
    sin_feedback = df[df["feedback"].isna()].copy()
    
    if sin_feedback.empty:
        st.markdown('<div class="alerta-exito">‚úÖ <strong>¬°Excelente!</strong> Todas las conversaciones tienen feedback.</div>', unsafe_allow_html=True)
        return

    # Detectar problemas de formato en el contenido
    problemas_formato = sin_feedback[sin_feedback["content"].str.contains(r'<div[^>]*>', na=False, regex=True)]
    
    # M√©tricas generales
    total_sin_feedback = len(sin_feedback)
    conversaciones_afectadas = sin_feedback["conversation_id"].nunique()
    usuarios_afectados = sin_feedback["user_id"].nunique()
    problemas_detectados = len(problemas_formato)

    # Mostrar m√©tricas
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.markdown(crear_metrica("Mensajes sin Feedback", f"{total_sin_feedback:,}", "üí¨"), unsafe_allow_html=True)
    with col2:
        st.markdown(crear_metrica("Conversaciones Afectadas", f"{conversaciones_afectadas:,}", "üó£Ô∏è"), unsafe_allow_html=True)
    with col3:
        st.markdown(crear_metrica("Usuarios Afectados", f"{usuarios_afectados:,}", "üë•"), unsafe_allow_html=True)
    with col4:
        color_problemas = COLORES['peligro'] if problemas_detectados > 0 else COLORES['exito']
        st.markdown(crear_metrica("Problemas de Formato", f"{problemas_detectados:,}", "‚ö†Ô∏è", color_problemas), unsafe_allow_html=True)

    # An√°lisis detallado por conversaci√≥n
    grupos_conversacion = sin_feedback.groupby("conversation_id")
    
    # Crear estad√≠sticas por conversaci√≥n
    stats_conversaciones = []
    
    for conv_id, datos_conv in grupos_conversacion:
        # Filtrar mensajes problem√°ticos en esta conversaci√≥n
        problemas_conv = datos_conv[datos_conv["content"].str.contains(r'<div[^>]*>', na=False, regex=True)]
        
        stats = {
            "conversation_id": conv_id,
            "titulo": datos_conv["conversation_title"].iloc[0] if pd.notna(datos_conv["conversation_title"].iloc[0]) else "Sin t√≠tulo",
            "usuario": datos_conv["user_id"].iloc[0],
            "total_mensajes": len(datos_conv),
            "problemas_formato": len(problemas_conv),
            "fecha_inicio": datos_conv["createdAt"].min(),
            "fecha_fin": datos_conv["createdAt"].max(),
            "roles_unicos": datos_conv["role"].nunique(),
            "tipos_unicos": datos_conv["type"].nunique() if "type" in datos_conv.columns else 0
        }
        
        # Calcular duraci√≥n
        duracion = stats["fecha_fin"] - stats["fecha_inicio"]
        stats["duracion"] = str(duracion).split('.')[0]  # Formato HH:MM:SS
        
        stats_conversaciones.append(stats)
    
    # Convertir a DataFrame y ordenar
    df_stats = pd.DataFrame(stats_conversaciones)
    df_stats = df_stats.sort_values("total_mensajes", ascending=False)

    # Filtros adicionales
    st.markdown('<div class="caja-filtros">', unsafe_allow_html=True)
    st.markdown("### üîß Filtros de An√°lisis")
    
    col1, col2 = st.columns(2)
    with col1:
        mostrar_solo_problemas = st.checkbox("Mostrar solo conversaciones con problemas de formato", value=False)
    
    with col2:
        min_mensajes = st.slider("M√≠nimo de mensajes por conversaci√≥n", 1, 50, 1)
    
    st.markdown('</div>', unsafe_allow_html=True)

    # Aplicar filtros
    if mostrar_solo_problemas:
        df_stats = df_stats[df_stats["problemas_formato"] > 0]
    
    df_stats = df_stats[df_stats["total_mensajes"] >= min_mensajes]

    if df_stats.empty:
        st.info("‚ÑπÔ∏è No hay conversaciones que coincidan con los filtros actuales")
        return

    # Paginaci√≥n
    total_conversaciones = len(df_stats)
    conversaciones_por_pagina = st.selectbox("Conversaciones por p√°gina:", [5, 10, 15, 20, 30], key="pag_sin_feedback", index=2)

    if total_conversaciones > conversaciones_por_pagina:
        total_paginas = (total_conversaciones + conversaciones_por_pagina - 1) // conversaciones_por_pagina
        pagina_actual = st.selectbox(f"P√°gina (Total: {total_paginas}):", range(1, total_paginas + 1), key="pag_actual_sin_feedback")
        indice_inicio = (pagina_actual - 1) * conversaciones_por_pagina
        indice_fin = indice_inicio + conversaciones_por_pagina
        stats_pagina = df_stats.iloc[indice_inicio:indice_fin]
        st.markdown(f'<div class="alerta-info">üìÑ Mostrando conversaciones {indice_inicio + 1} a {min(indice_fin, total_conversaciones)} de {total_conversaciones}</div>', unsafe_allow_html=True)
    else:
        stats_pagina = df_stats

    # Mostrar conversaciones
    for _, estadisticas in stats_pagina.iterrows():
        # Determinar nivel de prioridad
        if estadisticas["problemas_formato"] > 0:
            nivel_prioridad = "üî¥ Cr√≠tica (Formato roto)"
            color_prioridad = COLORES['peligro']
        elif estadisticas["total_mensajes"] > 15:
            nivel_prioridad = "üü° Alta (Muchos mensajes)"
            color_prioridad = COLORES['advertencia']
        else:
            nivel_prioridad = "üü¢ Media"
            color_prioridad = COLORES['exito']

        st.markdown(f"""
        <div class="contenedor-conversacion">
            <div class="encabezado-conversacion">
                <div class="info-conversacion">
                    <div class="titulo-conversacion">üó£Ô∏è Conversaci√≥n {estadisticas['conversation_id']}</div>
                    <div class="meta-conversacion">üìã <strong>T√≠tulo:</strong> {estadisticas['titulo']}</div>
                    <div class="meta-conversacion">üë§ <strong>Usuario:</strong> {estadisticas['usuario']}</div>
                    <div class="meta-conversacion">üìÖ <strong>Per√≠odo:</strong> {estadisticas['fecha_inicio'].strftime('%Y-%m-%d %H:%M')} ‚Üí {estadisticas['fecha_fin'].strftime('%Y-%m-%d %H:%M')}</div>
                    <div class="meta-conversacion">‚è±Ô∏è <strong>Duraci√≥n:</strong> {estadisticas['duracion']}</div>
                    <div class="meta-conversacion">‚ö†Ô∏è <strong>Prioridad:</strong> <span style="color: {color_prioridad}; font-weight: bold;">{nivel_prioridad}</span></div>
                </div>
                <div class="etiqueta-conversacion">{estadisticas['total_mensajes']} mensajes</div>
            </div>
        """, unsafe_allow_html=True)

        # Resumen de la conversaci√≥n
        st.markdown(f"""
        <div class="resumen-conversacion">
            <strong>üìä Resumen de la Conversaci√≥n</strong>
            <div class="cuadricula-resumen">
                <div class="item-resumen"><strong>üé≠ Roles:</strong><br>{estadisticas['roles_unicos']}</div>
                <div class="item-resumen"><strong>üìù Tipos:</strong><br>{estadisticas['tipos_unicos']}</div>
                <div class="item-resumen"><strong>‚ö†Ô∏è Problemas:</strong><br>{estadisticas['problemas_formato']}</div>
                <div class="item-resumen"><strong>üìä Promedio:</strong><br>{estadisticas['total_mensajes']/max(1, (estadisticas['fecha_fin'] - estadisticas['fecha_inicio']).days):.1f}/d√≠a</div>
            </div>
        </div>
        """, unsafe_allow_html=True)

        # Obtener los mensajes de esta conversaci√≥n
        mensajes_conv = sin_feedback[sin_feedback["conversation_id"] == estadisticas["conversation_id"]].sort_values("createdAt")

        # Mostrar mensajes problem√°ticos primero
        if estadisticas["problemas_formato"] > 0:
            mensajes_problema = mensajes_conv[mensajes_conv["content"].str.contains(r'<div[^>]*>', na=False, regex=True)]
            
            with st.expander(f"üîç Ver {len(mensajes_problema)} mensajes con problemas de formato", expanded=False):
                for idx, (_, mensaje) in enumerate(mensajes_problema.iterrows(), 1):
                    mostrar_mensaje_detallado(mensaje, idx, mensajes_problema)

        # Mostrar todos los mensajes
        with st.expander(f"üëÅÔ∏è Ver todos los {len(mensajes_conv)} mensajes sin feedback", expanded=False):
            for idx, (_, mensaje) in enumerate(mensajes_conv.iterrows(), 1):
                mostrar_mensaje_detallado(mensaje, idx, mensajes_conv)

        st.markdown("</div>", unsafe_allow_html=True)
        st.markdown("---")

def mostrar_mensaje_detallado(mensaje, indice, df_contexto):
    """Funci√≥n auxiliar para mostrar mensajes detallados"""
    rol = mensaje.get("role", "N/A").lower()
    contenido_raw = mensaje.get("content", "[Sin contenido]").strip()
    timestamp = pd.to_datetime(mensaje.get("createdAt", "")).strftime("%Y-%m-%d %H:%M:%S")
    tipo_mensaje = mensaje.get("type", "general")
    
    # Detectar problemas
    tiene_problema = bool(re.search(r'<div[^>]*>', contenido_raw))
    
    clase_css = "mensaje-usuario" if rol == "user" else "mensaje-asistente" if rol == "assistant" else "mensaje-sistema"
    icono = "üë§" if rol == "user" else "ü§ñ" if rol == "assistant" else "‚öôÔ∏è"
    
    if tiene_problema:
        clase_css += " problema-formato"
        icono = "‚ö†Ô∏è"
    
    st.markdown(f"""
    <div class="item-mensaje {clase_css}">
        <div class="encabezado-mensaje">
            <div class="rol-mensaje">
                <span>{icono}</span>
                <span><strong>Mensaje #{indice} - {rol.title()}</strong></span>
                <span style="font-size:0.8rem;color:#6c757d;">({tipo_mensaje})</span>
            </div>
            <div class="tiempo-mensaje">üïê {timestamp}</div>
        </div>
        <div class="contenido-mensaje">
            <strong>üí¨ Contenido:</strong><br>
            <div style="background: {'#ffebee' if tiene_problema else '#f8f9fa'}; padding: 0.5rem; border-radius: 4px; margin: 0.5rem 0;">
                {formatear_mensaje_tool(contenido_raw)}
            </div>
        </div>
    """, unsafe_allow_html=True)

    st.markdown("</div>", unsafe_allow_html=True)
