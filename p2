def mostrar_analisis_conversaciones_feedback():
    st.markdown("## 🔍 Análisis de Conversaciones por Feedback")

    if st.session_state.datos is None:
        st.warning("⚠️ Primero debes conectar a la base de datos")
        return

    st.markdown('<div class="alerta-info">📊 Esta sección muestra conversaciones COMPLETAS basadas en el feedback de sus mensajes</div>', unsafe_allow_html=True)

    # Filtros reducidos
    col1, col2 = st.columns(2)

    with col1:
        try:
            fechas = pd.to_datetime(st.session_state.datos["createdAt"], errors='coerce').dropna()
            fecha_min = fechas.min().date()
            fecha_max = fechas.max().date()
        except:
            fecha_min = datetime.now().date() - timedelta(days=30)
            fecha_max = datetime.now().date()

        fecha_inicio = st.date_input("Fecha Inicio", fecha_min, key="fecha_inicio_feedback")
        fecha_fin = st.date_input("Fecha Fin", fecha_max, key="fecha_fin_feedback")

    with col2:
        tipos_feedback = []
        if "feedback" in st.session_state.datos.columns:
            opciones_feedback = list(st.session_state.datos["feedback"].dropna().unique()) + ["Sin feedback"]
            tipos_feedback = st.multiselect(
                "Tipos de Feedback",
                opciones_feedback,
                default=["positive", "negative"]
            )

    if st.button("🔍 Buscar Conversaciones", type="primary", use_container_width=True) and tipos_feedback:
        with st.spinner("🔄 Cargando conversaciones..."):
            df = obtener_conversaciones_por_feedback(
                st.session_state.config_bd,
                tipos_feedback,
                fecha_inicio,
                fecha_fin
            )

            if df.empty:
                st.warning("⚠️ No se encontraron conversaciones con los filtros aplicados")
                return

            # Métricas
            total_conversaciones = df["conversation_id"].nunique()
            total_mensajes = len(df)
            usuarios = df["user_id"].nunique()

            col1, col2, col3 = st.columns(3)
            with col1: st.markdown(crear_metrica("Conversaciones", f"{total_conversaciones:,}", "🗣️", COLORES['primario']), unsafe_allow_html=True)
            with col2: st.markdown(crear_metrica("Mensajes", f"{total_mensajes:,}", "💬", COLORES['exito']), unsafe_allow_html=True)
            with col3: st.markdown(crear_metrica("Usuarios", f"{usuarios:,}", "👥", COLORES['advertencia']), unsafe_allow_html=True)

            # Mostrar cada conversación
            for conv_id, datos_conv in df.groupby("conversation_id"):
                titulo = datos_conv["conversation_title"].iloc[0] or "Sin título"
                usuario = datos_conv["user_id"].iloc[0]
                fecha_inicio = datos_conv["createdAt"].min()
                fecha_fin = datos_conv["createdAt"].max()
                duracion = fecha_fin - fecha_inicio
                feedback_counts = datos_conv["feedback"].fillna("Sin feedback").value_counts().to_dict()
                feedback_resumen = ", ".join([f"{k}: {v}" for k, v in feedback_counts.items()])

                st.markdown(f"""
                <div class="contenedor-conversacion">
                    <div class="encabezado-conversacion">
                        <div class="info-conversacion">
                            <div class="titulo-conversacion">🗣️ Conversación {conv_id}</div>
                            <div class="meta-conversacion">📋 <strong>Título:</strong> {titulo}</div>
                            <div class="meta-conversacion">👤 <strong>Usuario:</strong> {usuario}</div>
                            <div class="meta-conversacion">📅 <strong>Duración:</strong> {duracion}</div>
                            <div class="meta-conversacion">📝 <strong>Feedback:</strong> {feedback_resumen}</div>
                        </div>
                        <div class="etiqueta-conversacion">{len(datos_conv)} mensajes</div>
                    </div>
                """, unsafe_allow_html=True)

                # Desplegable con mensajes
                with st.expander(f"👁️ Ver conversación completa", expanded=False):
                    for idx, (_, msg) in enumerate(datos_conv.iterrows(), 1):
                        rol = msg.get("role", "N/A").lower()
                        contenido = msg.get("content", "[Sin contenido]").strip()
                        timestamp = pd.to_datetime(msg.get("createdAt", "")).strftime("%Y-%m-%d %H:%M:%S")
                        feedback = msg.get("feedback", "Sin feedback")

                        clase_css = {
                            "user": "mensaje-usuario",
                            "assistant": "mensaje-asistente"
                        }.get(rol, "mensaje-sistema")

                        icono = {"user": "👤", "assistant": "🤖"}.get(rol, "⚙️")

                        st.markdown(f"""
                        <div class="item-mensaje {clase_css}">
                            <div class="encabezado-mensaje">
                                <div class="rol-mensaje">
                                    <span>{icono}</span>
                                    <span><strong>Mensaje #{idx} - {rol.title()}</strong></span>
                                </div>
                                <div class="tiempo-mensaje">🕐 {timestamp} | 📝 {feedback}</div>
                            </div>
                            <div class="contenido-mensaje">{contenido}</div>
                        </div>
                        """, unsafe_allow_html=True)

                st.markdown("</div>", unsafe_allow_html=True)
                st.markdown("---")
